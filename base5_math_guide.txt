Understanding Number Systems: Base 5 and Beyond

Q1: Writing Numbers from 1 to 50 in Base 5
In base 5, we use only the digits 0, 1, 2, 3, and 4. 
To count in base 5, we increment normally until we reach 4. 
The next number, 5 in base 10, is written as 10 in base 5. 
Below is a list of numbers from 1 to 50 in base 5:

1, 2, 3, 4, 10, 11, 12, 13, 14, 20, 21, 22, 23, 24, 30, 31, 32, 33, 34, 40,
41, 42, 43, 44, 100, 101, 102, 103, 104, 110, 111, 112, 113, 114, 120, 121,
122, 123, 124, 130, 131, 132, 133, 134, 140, 141, 142, 143, 144, 200

Q2: Addition and Subtraction in Base 5
Example of single-digit addition and subtraction in base 5:

Addition: 3 + 2 = 10 (since 3 + 2 = 5 in base 10, which is 10 in base 5)
Subtraction: 4 - 2 = 2

Q3: Multiplication Table in Base 5

Multiplication Table:

  ×  | 1  | 2  | 3  | 4  
------------------------
  1  | 1  | 2  | 3  | 4  
  2  | 2  | 4  | 11 | 13  
  3  | 3  | 11 | 14 | 22  
  4  | 4  | 13 | 22 | 31  

Q4: Multiplication in Base 5
Example: Multiply 24₅ × 3₅

Steps:
  24₅ × 3₅ = 
4*3=22
2*3=11
carry forward 2 and add it to 11
=
132₅

Q5: Convert Base 5 to Base 10
Formula: Base 10 = dₙ × 5ⁿ + dₙ₋₁ × 5ⁿ⁻¹ + ... + d₀ × 5⁰

Base 5 | Base 10
-------|--------
1₅     | 1
10₅    | 5
20₅    | 10
30₅    | 15
100₅   | 25

Q6: Strategy to Convert Base 5 to Base 10

Start with the rightmost digit.
Multiply each digit by 5 raised to the power of its position (starting from 0).
Sum all the values to get the base 10 equivalent.

Python Code:

def base5_to_base10(num):
    num_str = str(num)
    base10 = 0
    for i, digit in enumerate(reversed(num_str)):
        base10 += int(digit) * (5 ** i)
    return base10

Q7: Convert Base N to Base M

Convert the number from base N to base 10 using the method from Q6.
Convert the base 10 number to base M:
Divide the number by M, recording the remainders.
Continue dividing the quotient by M until it reaches 0.
The base M representation is the remainders read in reverse order

Python Code:

def baseN_to_baseM(num_str, baseN, baseM):
    base10 = sum(int(digit) * (baseN ** i) for i, digit in enumerate(reversed(num_str)))
    baseM_result = ""
    while base10 > 0:
        baseM_result = str(base10 % baseM) + baseM_result
        base10 //= baseM
    return baseM_result

Q9: Representation in Base 10
10⁵ = 100000 (from 00000 to 99999), so 100,000 numbers can be represented.

Q10: Algorithm for log10

Start with an initial guess for x (e.g., 1).
Compute 10^x and compare it with N.
If 10^x < N, increase x; if 10^x > N, decrease x.
Repeat this process using binary search or incremental steps to refine the value of x.
Stop when the difference between 10^x and N is small enough (e.g., within a tolerance like 0.0001).



Python Code:

def log10_approx(N, delta=0.0001):
    low, high = 0, N  
    while high - low > delta:
        mid = (low + high) / 2
        if 10 ** mid > N:
            high = mid
        else:
            low = mid
    return round(low, 6)
